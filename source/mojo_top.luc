module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output io_led[0],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,       // AVR RX buffer full_
    output a, 
    output b, 
    output c, 
    input sum, 
    input carry
  ) {
  
  sig rst;                  // reset signal
  dff counter[26](.clk(clk), .rst(rst));
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    .rst(rst) {
      fsm state = {AON, BON, CON, ABON, BCON, ACON, ABCON};
    }
  }
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    a = 0;
    b = 0;
    c = 0;
    
    counter.d = counter.q + 1;
    
    case(state.q) {
      state.AON:
        a = 1;
        b = 0;
        c = 0;
        if (sum != 1) {
            io_led[0] = 1;
          }
          if (carry == 1) {
            io_led[1][0:7] = 1;
          }
        if(counter.q[25] == 1) {
          state.d = state.BON;
          counter.d = 0;
          
        }
      state.BON:
        a = 0;
        b = 1;
        c = 0;
        if (sum != 1) {
            io_led[0][0:7] = 1;
          }
          if (carry == 1) {
            io_led[1][0:7] = 1;
          }
        if(counter.q[25] == 1) {
          state.d = state.CON;
          counter.d = 0;
        }
      state.CON:
        a = 0;
        b = 0;
        c = 1;
        if (sum != 1) {
            io_led[0][0:7] = 1;
          }
          if (carry == 1) {
            io_led[1][0:7] = 1;
          }
        if(counter.q[25] == 1) {
          state.d = state.ABON;
          counter.d = 0;
        }
      state.ABON:
        a = 1;
        b = 1;
        c = 0;
        if (sum != 1) {
            io_led[0][0:7] = 1;
          }
          if (carry == 1) {
            io_led[1][0:7] = 1;
          }
        if(counter.q[25] == 1) {
          state.d = state.BCON;
          counter.d = 0;
        }
      state.BCON:
        a = 0;
        b = 1;
        c = 1;
        if (sum != 1) {
            io_led[0][0:7] = 1;
          }
          if (carry == 1) {
            io_led[1][0:7] = 1;
          }
        if(counter.q[25] == 1) {
          state.d = state.ACON;
          counter.d = 0;
        }
      state.ACON:
        a = 1;
        b = 0;
        c = 1;
        if (sum != 1) {
            io_led[0][0:7] = 1;
          }
          if (carry == 1) {
            io_led[1][0:7] = 1;
          }
        if(counter.q[25] == 1) {
          state.d = state.ABCON;
          counter.d = 0;
        }
      state.ABCON:
        a = 1;
        b = 1;
        c = 1;
        if (sum != 1) {
            io_led[0][0:7] = 1;
          }
          if (carry == 1) {
            io_led[1][0:7] = 1;
          }
        if(counter.q[25] == 1) {
          state.d = state.AON;
          counter.d = 0;
          
        }
    }
  }
}